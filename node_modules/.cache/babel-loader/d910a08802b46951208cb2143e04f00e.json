{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/rodrigoDeSouzaFernandes/projetos-pessoais/processo-seletivo-moodar/src/components/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { getMatrixPosition, toLetter } from '../../utils/convert';\nimport resolveTour from '../../utils/resolveTour';\nimport { BoardBody, Square, Line, Knight } from './styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const makeBoard = Array(8).fill(Array(8).fill({\n    visited: false,\n    knight: false,\n    content: ''\n  }));\n  const [board, setBoard] = useState(makeBoard);\n  const [initialPosition, setInitialPosition] = useState();\n\n  const setKnight = square => {\n    const [line, column] = square.split('-').map(Number);\n    const newBoard = board.map((row, l) => row.map((col, c) => {\n      console.log('selecionado', l, c, 'parametros', line, column, l == line && column == c);\n\n      if (l == line && column == c) {\n        return {\n          knight: true,\n          visited: true,\n          content: 'x'\n        };\n      }\n\n      return { ...col,\n        knight: false\n      };\n    }));\n    setInitialPosition({\n      line,\n      column\n    });\n    setBoard(newBoard);\n  };\n\n  const play = ({\n    line,\n    column\n  }) => {\n    const initSquare = `${toLetter(column)}${line + 1}`;\n    const result = resolveTour(initSquare).map(getMatrixPosition);\n    console.log(result);\n    let count = 0;\n    setInterval(() => {\n      console.log(result[count]);\n      setKnight(result[count], true);\n      if (count === result.length - 1) clearInterval();else count += 1;\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(BoardBody, {\n    children: [board.map((line, l) => /*#__PURE__*/_jsxDEV(Line, {\n      children: line.map(({\n        knight,\n        content\n      }, c) => !knight ? /*#__PURE__*/_jsxDEV(Square, {\n        id: `${l}-${c}`,\n        onClick: ({\n          target: {\n            id\n          }\n        }) => setKnight(id),\n        children: content\n      }, `square ${(l, c)}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Knight, {\n        id: `${l}-${c}`\n      }, `square ${(l, c)}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))\n    }, `linha ${l}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => play(initialPosition),\n      children: \"play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"99EgjwDV09AnQcHKHnftivKkPko=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/rodrigo/rodrigoDeSouzaFernandes/projetos-pessoais/processo-seletivo-moodar/src/components/Board/index.js"],"names":["React","useState","getMatrixPosition","toLetter","resolveTour","BoardBody","Square","Line","Knight","Board","makeBoard","Array","fill","visited","knight","content","board","setBoard","initialPosition","setInitialPosition","setKnight","square","line","column","split","map","Number","newBoard","row","l","col","c","console","log","play","initSquare","result","count","setInterval","length","clearInterval","target","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { getMatrixPosition, toLetter } from '../../utils/convert';\nimport resolveTour from '../../utils/resolveTour';\n\nimport { BoardBody, Square, Line, Knight } from './styled'\n\n\nfunction Board() {\n  const makeBoard = Array(8).fill(Array(8).fill({visited: false, knight: false, content:''}))\n  const [board, setBoard] = useState(makeBoard);\n  const [initialPosition, setInitialPosition] = useState();\n\n  const setKnight = (square) => {\n    const [line, column] = square.split('-').map(Number);\n    \n    const newBoard = board.map((row, l) => row\n    .map((col, c) => {\n      console.log('selecionado', l, c, 'parametros', line, column, l == line && column == c)\n      if (l == line && column == c) {\n        return {\n            knight: true,\n            visited: true,\n            content: 'x',\n          }\n      }\n      return {\n        ...col,\n        knight: false,\n      }\n    }\n    ))\n    setInitialPosition({line, column})\n    setBoard(newBoard)\n  }\n\n  const play = ({line, column}) => {\n    const initSquare = `${toLetter(column)}${line + 1}`;\n\n    const result = resolveTour(initSquare).map(getMatrixPosition)\n    console.log(result)\n    \n    let count = 0;\n\n    setInterval(() => {\n      console.log(result[count])\n      setKnight(result[count], true)\n\n      if(count === result.length -1) clearInterval();\n      else count += 1\n    }, 1000)\n  }\n\n  return (\n    <BoardBody >\n    {board.map((line, l) => (\n      <Line key={`linha ${l}`}>\n        {line.map(({knight, content}, c) => \n          !knight ? (\n            <Square\n              key={`square ${l, c}`}\n              id={`${l}-${c}`}\n              onClick={ ({target: {id}}) => setKnight(id) }\n            >\n              {content}\n            </Square>\n            ) : (\n            <Knight\n              key={`square ${l, c}`}\n              id={`${l}-${c}`}\n            />\n          ))}\n      </Line>))}\n      <button\n        onClick={ () => play(initialPosition) }\n      >\n        play\n      </button>\n      </BoardBody>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}