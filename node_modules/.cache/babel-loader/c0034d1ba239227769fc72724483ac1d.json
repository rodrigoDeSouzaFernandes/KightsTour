{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/rodrigoDeSouzaFernandes/projetos-pessoais/KightsTour/src/components/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { getMatrixPosition, toLetter } from '../../utils/convert';\nimport resolveTour from '../../utils/resolveTour';\nimport { BoardBody, Square, Line, Knight, Move, Movements, Body, Columns, MovementsContainer, BtnPlay } from './styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const makeBoard = Array(8).fill(Array(8).fill({\n    visited: false,\n    knight: false,\n    content: ''\n  }));\n  const [board, setBoard] = useState(makeBoard);\n  const [initialPosition, setInitialPosition] = useState({\n    line: 0,\n    column: 0\n  });\n  const [movements, setMovements] = useState([]);\n  const [playing, setPlaying] = useState(false);\n\n  const setKnight = (square, content = '') => {\n    const [line, column] = square.split('-').map(Number);\n    console.log(content);\n    const newBoard = board.map((row, l) => row.map((col, c) => {\n      if (l == line && column == c) {\n        console.log('dentro do if', 'casa', c, l);\n        return {\n          content,\n          visited: true,\n          knight: true\n        };\n      }\n\n      return { ...col,\n        knight: false\n      };\n    }));\n    setInitialPosition({\n      line,\n      column\n    });\n    setBoard(newBoard);\n  };\n\n  const play = ({\n    line,\n    column\n  }) => {\n    const initSquare = `${toLetter(column)}${line + 1}`;\n    const squares = resolveTour(initSquare);\n    const result = squares.map(getMatrixPosition);\n    console.log(result);\n    let count = 0;\n    const abc = [];\n\n    const moveKnight = () => {\n      abc.push({\n        moveNumber: count + 1,\n        square: squares[count]\n      });\n      setMovements(abc);\n      setKnight(result[count], count + 1);\n      if (count === result.length - 1) clearInterval(myInterval);else count += 1;\n    };\n\n    const myInterval = setInterval(moveKnight, 500);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Body, {\n    children: [/*#__PURE__*/_jsxDEV(BoardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Columns, {\n        children: Array(8).fill('p').map((e, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", toLetter(i), \" \"]\n        }, e + i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), board.map((line, l) => /*#__PURE__*/_jsxDEV(Line, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: l + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), line.map(({\n          knight,\n          content\n        }, c) => !knight ? /*#__PURE__*/_jsxDEV(Square, {\n          id: `${l}-${c}`,\n          onClick: ({\n            target: {\n              id\n            }\n          }) => setKnight(id),\n          children: content\n        }, `square ${(l, c)}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Knight, {\n          id: `${l}-${c}`\n        }, `square ${(l, c)}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 19\n        }, this))]\n      }, `linha ${l}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)), playing ? /*#__PURE__*/_jsxDEV(BtnPlay, {\n        disabled: playing,\n        onClick: () => {\n          setPlaying(true);\n          play(initialPosition);\n        },\n        children: \"COME\\xC7AR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(BtnPlay, {\n        children: \"limpar dados\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovementsContainer, {\n      children: /*#__PURE__*/_jsxDEV(Movements, {\n        children: movements.map(({\n          moveNumber,\n          square\n        }) => /*#__PURE__*/_jsxDEV(Move, {\n          children: `${moveNumber}Â° - ${square}`\n        }, `${moveNumber}${square}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 39\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"hUeZYdQGSVmCDZPOYDAtIZvIzCw=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/rodrigo/rodrigoDeSouzaFernandes/projetos-pessoais/KightsTour/src/components/Board/index.js"],"names":["React","useState","getMatrixPosition","toLetter","resolveTour","BoardBody","Square","Line","Knight","Move","Movements","Body","Columns","MovementsContainer","BtnPlay","Board","makeBoard","Array","fill","visited","knight","content","board","setBoard","initialPosition","setInitialPosition","line","column","movements","setMovements","playing","setPlaying","setKnight","square","split","map","Number","console","log","newBoard","row","l","col","c","play","initSquare","squares","result","count","abc","moveKnight","push","moveNumber","length","clearInterval","myInterval","setInterval","e","i","target","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { getMatrixPosition, toLetter } from '../../utils/convert';\nimport resolveTour from '../../utils/resolveTour';\n\nimport { BoardBody, Square, Line, Knight, Move,\n  Movements, Body, Columns, MovementsContainer, BtnPlay } from './styled'\n\n\nfunction Board() {\n  const makeBoard = Array(8).fill(Array(8).fill({visited: false, knight: false, content:''}))\n  const [board, setBoard] = useState(makeBoard);\n  const [initialPosition, setInitialPosition] = useState({line: 0, column: 0});\n  const [movements, setMovements] = useState([])\n  const [playing, setPlaying] = useState(false);\n\n  const setKnight = (square, content = '') => {\n    const [line, column] = square.split('-').map(Number);\n\n    console.log(content)\n    \n    const newBoard = board.map((row, l) => row\n    .map((col, c) => {\n      \n      if (l == line && column == c) {\n        console.log('dentro do if', 'casa', c , l)\n        return {\n          content,\n          visited: true,\n          knight: true,\n          }\n      }\n      return {\n        ...col,\n        knight: false,\n      }\n    }\n    ))\n    setInitialPosition({line, column})\n    setBoard(newBoard)\n  }\n\n  const play = ({line, column}) => {\n    const initSquare = `${toLetter(column)}${line + 1}`;\n\n    const squares = resolveTour(initSquare)\n    const result = squares.map(getMatrixPosition)\n    console.log(result)\n    \n    let count = 0;\n    const abc = []\n\n    const  moveKnight = () => {\n      abc.push({ moveNumber: count + 1, square: squares[count]})\n      setMovements(abc);\n      setKnight(result[count], count + 1);\n      \n      if(count === result.length -1) clearInterval(myInterval);\n      else count += 1\n        \n    }\n    \n    const myInterval = setInterval( moveKnight , 500)\n  }\n\n  return (\n    <Body>\n      <BoardBody >\n        <Columns>\n          {Array(8).fill('p').map((e, i) => <p key={e + i}> {toLetter(i)} </p>)}\n        </Columns>\n        {board.map((line, l) => (\n          <Line key={`linha ${l}`}>\n            <p>{l + 1}</p>\n            {line.map(({knight, content}, c) => \n              !knight ? (\n                <Square\n                key={`square ${l, c}`}\n                id={`${l}-${c}`}\n                onClick={ ({target: {id}}) => setKnight(id) }\n                >\n                  {content}\n                </Square>\n                ) : (\n                  <Knight\n                  key={`square ${l, c}`}\n                  id={`${l}-${c}`}\n                  />\n                  ))}\n          </Line>))}\n          {playing ? (\n          <BtnPlay\n            disabled={playing}\n            onClick={ () => {\n              setPlaying(true);\n              play(initialPosition);\n            } }\n            >\n            COMEÃAR\n          </BtnPlay>\n          ) : (\n          <BtnPlay>\n          limpar dados\n          </BtnPlay>\n          )}\n      </BoardBody>\n      <MovementsContainer>\n        <Movements>\n          {movements.map(\n            ({moveNumber, square}) => <Move key={`${moveNumber}${square}`}>{`${moveNumber}Â° - ${square}`}</Move>)}\n        </Movements>\n      </MovementsContainer>\n    </Body>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}